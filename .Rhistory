geom_density(fill = "orange") +
labs(title = "Density Plot of EFC", x = "EFC", y = "Density")
# Function to display top n frequent values
top_n_frequent <- function(data, variable, n = 10) {
freq <- as.data.frame(table(data[[variable]]))
names(freq) <- c("Value", "Frequency")
freq <- freq[order(-freq$Frequency), ]
head(freq, n)
}
# TSI_MATH
top_n_frequent(data, "TSI_MATH")
# TSI_WRITING
top_n_frequent(data, "TSI_WRITING")
# TSI_READING
top_n_frequent(data, "TSI_READING")
# Highschool
top_n_frequent(data, "Highschool")
# EFC
top_n_frequent(data, "EFC")
# Replace "NULL" with 0 for TSI variables
data$TSI_MATH[data$TSI_MATH == "NULL"] <- 0
data$TSI_WRITING[data$TSI_WRITING == "NULL"] <- 0
data$TSI_READING[data$TSI_READING == "NULL"] <- 0
# TSI_MATH
top_n_frequent(data, "TSI_MATH")
# TSI_WRITING
top_n_frequent(data, "TSI_WRITING")
# TSI_READING
top_n_frequent(data, "TSI_READING")
# Function to convert values based on the specified condition
convert_to_binary <- function(x) {
as.integer(x < 350 | (x > 400 & x < 950))
}
# Apply the function to the specified columns
data$TSI_MATH <- convert_to_binary(as.numeric(data$TSI_MATH))
data$TSI_WRITING <- convert_to_binary(as.numeric(data$TSI_WRITING))
data$TSI_READING <- convert_to_binary(as.numeric(data$TSI_READING))
# TSI_MATH
top_n_frequent(data, "TSI_MATH")
# TSI_WRITING
top_n_frequent(data, "TSI_WRITING")
# TSI_READING
top_n_frequent(data, "TSI_READING")
library(dplyr)
library(tidyr)
# Converting ordinal variables to numeric
data <- data %>%
mutate(
MotherEducation = case_when(
MotherEducation == "Associate Degree" ~ 1,
MotherEducation == "Bachelor/Four-year Degree" ~ 2,
MotherEducation == "Graduate/Professional Degree" ~ 3,
MotherEducation == "High School Diploma or GED" ~ 4,
MotherEducation == "No High School" ~ 5,
MotherEducation == "Some College" ~ 6,
MotherEducation == "Some High School" ~ 7,
MotherEducation == "Unknown" ~ 8
),
FatherEducation = case_when(
FatherEducation == "Associate Degree" ~ 1,
FatherEducation == "Bachelor/Four-year Degree" ~ 2,
FatherEducation == "Graduate/Professional Degree" ~ 3,
FatherEducation == "High School Diploma or GED" ~ 4,
FatherEducation == "No High School" ~ 5,
FatherEducation == "Some College" ~ 6,
FatherEducation == "Some High School" ~ 7,
FatherEducation == "Unknown" ~ 8
),
FirstGen = case_when(
FirstGen == "Unknown" ~ 3,
FirstGen == "Yes" ~ 1,
FirstGen == "No" ~ 0
)
)
# Handling binary variables
data$Homeschooled <- as.numeric(data$Homeschooled)
data$HasGED <- as.numeric(data$HasGED)
# Since there are many different high schools, we take into account the top 10 and then use a separate "Other" category for the other ones
# Calculate the top 10 most common high schools
top_schools <- data %>%
count(Highschool, sort = TRUE) %>%
top_n(10, n) %>%
pull(Highschool)
# Replace less common high schools with 'Other'
data <- data %>%
mutate(Highschool = ifelse(Highschool %in% top_schools, Highschool, "Other"))
str(data)
library(data.table)
library(mltools)
# One hot encoding variables
data_dt <- as.data.table(data)
cols_to_encode <- c("Program", "College", "Gender", "Race", "Highschool", "FinAid")
data_dt[, (cols_to_encode) := lapply(.SD, as.factor), .SDcols = cols_to_encode]
data_encoded <- one_hot(data_dt, dropUnusedLevels = TRUE)
data_encoded_df <- as.data.frame(data_encoded)
# Finally, converting EFC to numeric
data_encoded_df$EFC <- as.numeric(data_encoded_df$EFC)
str(data_encoded_df)
library(data.table)
library(mltools)
# One hot encoding variables
data_dt <- as.data.table(data)
cols_to_encode <- c("Program", "College", "Gender", "Race", "Highschool", "FinAid")
data_dt[, (cols_to_encode) := lapply(.SD, as.factor), .SDcols = cols_to_encode]
data_encoded <- one_hot(data_dt, dropUnusedLevels = TRUE)
data_encoded_df <- as.data.frame(data_encoded)
# Create a list to hold mapping for each categorical variable
mapping_list <- lapply(cols_to_encode, function(col) {
# Get the unique levels for the categorical variable
levels <- unique(data_dt[[col]])
# Create a data frame that maps the original levels to encoded column names
mapping_df <- setNames(data.frame(levels), col)
# For each level, create the corresponding one-hot encoded column name
mapping_df$encoded_column <- paste0(col, "_", levels)
return(mapping_df)
})
# Combine all the mappings into a single data frame
mapping_table <- do.call(rbind, mapping_list)
library(readr)
library(dplyr)
library(ggplot2)
library(caret)
library(cluster)
library(factoextra)
data <- read.csv("personas.csv")
summary(data)
str(data)
# Age
ggplot(data, aes(x = Age)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
labs(title = "Histogram of Age", x = "Age", y = "Count")
# Homeschooled
ggplot(data, aes(x = factor(Homeschooled))) +
geom_bar(fill = "green") +
labs(title = "Bar Plot of Homeschooled", x = "Homeschooled", y = "Count")
# HasGED
ggplot(data, aes(x = factor(HasGED))) +
geom_bar(fill = "green") +
labs(title = "Bar Plot of HasGED", x = "HasGED", y = "Count")
# Program
ggplot(data, aes(x = Program)) +
geom_bar(fill = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Bar Plot of Program", x = "Program", y = "Count")
# College
ggplot(data, aes(x = College)) +
geom_bar(fill = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Bar Plot of College", x = "College", y = "Count")
# Gender
ggplot(data, aes(x = Gender)) +
geom_bar(fill = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Bar Plot of Gender", x = "Gender", y = "Count")
# FirstGen
ggplot(data, aes(x = FirstGen)) +
geom_bar(fill = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Bar Plot of FirstGen", x = "FirstGen", y = "Count")
# Race
ggplot(data, aes(x = Race)) +
geom_bar(fill = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Bar Plot of Race", x = "Race", y = "Count")
# TSI_MATH
ggplot(data, aes(x = TSI_MATH)) +
geom_density(fill = "orange") +
labs(title = "Density Plot of TSI_MATH", x = "TSI_MATH", y = "Density")
# TSI_WRITING
ggplot(data, aes(x = TSI_WRITING)) +
geom_density(fill = "orange") +
labs(title = "Density Plot of TSI_WRITING", x = "TSI_WRITING", y = "Density")
# TSI_READING
ggplot(data, aes(x = TSI_READING)) +
geom_density(fill = "orange") +
labs(title = "Density Plot of TSI_READING", x = "TSI_READING", y = "Density")
# MotherEducation
ggplot(data, aes(x = MotherEducation)) +
geom_bar(fill = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Bar Plot of MotherEducation", x = "MotherEducation", y = "Count")
# FatherEducation
ggplot(data, aes(x = FatherEducation)) +
geom_bar(fill = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Bar Plot of FatherEducation", x = "FatherEducation", y = "Count")
# Highschool
ggplot(data, aes(x = Highschool)) +
geom_density(fill = "orange") +
labs(title = "Density Plot of Highschool", x = "Highschool", y = "Density")
# FinAid
ggplot(data, aes(x = FinAid)) +
geom_bar(fill = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Bar Plot of FinAid", x = "FinAid", y = "Count")
# EFC
ggplot(data, aes(x = EFC)) +
geom_density(fill = "orange") +
labs(title = "Density Plot of EFC", x = "EFC", y = "Density")
# Function to display top n frequent values
top_n_frequent <- function(data, variable, n = 10) {
freq <- as.data.frame(table(data[[variable]]))
names(freq) <- c("Value", "Frequency")
freq <- freq[order(-freq$Frequency), ]
head(freq, n)
}
# TSI_MATH
top_n_frequent(data, "TSI_MATH")
# TSI_WRITING
top_n_frequent(data, "TSI_WRITING")
# TSI_READING
top_n_frequent(data, "TSI_READING")
# Highschool
top_n_frequent(data, "Highschool")
# EFC
top_n_frequent(data, "EFC")
# Function to display top n frequent values
top_n_frequent <- function(data, variable, n = 10) {
freq <- as.data.frame(table(data[[variable]]))
names(freq) <- c("Value", "Frequency")
freq <- freq[order(-freq$Frequency), ]
head(freq, n)
}
# TSI_MATH
top_n_frequent(data, "TSI_MATH")
# TSI_WRITING
top_n_frequent(data, "TSI_WRITING")
# TSI_READING
top_n_frequent(data, "TSI_READING")
# Highschool
top_n_frequent(data, "Highschool")
# EFC
top_n_frequent(data, "EFC")
# Replace "NULL" with 0 for TSI variables
data$TSI_MATH[data$TSI_MATH == "NULL"] <- 0
data$TSI_WRITING[data$TSI_WRITING == "NULL"] <- 0
data$TSI_READING[data$TSI_READING == "NULL"] <- 0
# TSI_MATH
top_n_frequent(data, "TSI_MATH")
# TSI_WRITING
top_n_frequent(data, "TSI_WRITING")
# TSI_READING
top_n_frequent(data, "TSI_READING")
# Function to convert values based on the specified condition
convert_to_binary <- function(x) {
as.integer(x < 350 | (x > 400 & x < 950))
}
# Apply the function to the specified columns
data$TSI_MATH <- convert_to_binary(as.numeric(data$TSI_MATH))
data$TSI_WRITING <- convert_to_binary(as.numeric(data$TSI_WRITING))
data$TSI_READING <- convert_to_binary(as.numeric(data$TSI_READING))
# TSI_MATH
top_n_frequent(data, "TSI_MATH")
# TSI_WRITING
top_n_frequent(data, "TSI_WRITING")
# TSI_READING
top_n_frequent(data, "TSI_READING")
library(dplyr)
library(tidyr)
# Converting ordinal variables to numeric
data <- data %>%
mutate(
MotherEducation = case_when(
MotherEducation == "Associate Degree" ~ 1,
MotherEducation == "Bachelor/Four-year Degree" ~ 2,
MotherEducation == "Graduate/Professional Degree" ~ 3,
MotherEducation == "High School Diploma or GED" ~ 4,
MotherEducation == "No High School" ~ 5,
MotherEducation == "Some College" ~ 6,
MotherEducation == "Some High School" ~ 7,
MotherEducation == "Unknown" ~ 8
),
FatherEducation = case_when(
FatherEducation == "Associate Degree" ~ 1,
FatherEducation == "Bachelor/Four-year Degree" ~ 2,
FatherEducation == "Graduate/Professional Degree" ~ 3,
FatherEducation == "High School Diploma or GED" ~ 4,
FatherEducation == "No High School" ~ 5,
FatherEducation == "Some College" ~ 6,
FatherEducation == "Some High School" ~ 7,
FatherEducation == "Unknown" ~ 8
),
FirstGen = case_when(
FirstGen == "Unknown" ~ 3,
FirstGen == "Yes" ~ 1,
FirstGen == "No" ~ 0
)
)
# Handling binary variables
data$Homeschooled <- as.numeric(data$Homeschooled)
data$HasGED <- as.numeric(data$HasGED)
# Since there are many different high schools, we take into account the top 10 and then use a separate "Other" category for the other ones
# Calculate the top 10 most common high schools
top_schools <- data %>%
count(Highschool, sort = TRUE) %>%
top_n(10, n) %>%
pull(Highschool)
# Replace less common high schools with 'Other'
data <- data %>%
mutate(Highschool = ifelse(Highschool %in% top_schools, Highschool, "Other"))
str(data)
library(data.table)
library(mltools)
# One hot encoding variables
data_dt <- as.data.table(data)
cols_to_encode <- c("Program", "College", "Gender", "Race", "Highschool", "FinAid")
data_dt[, (cols_to_encode) := lapply(.SD, as.factor), .SDcols = cols_to_encode]
data_encoded <- one_hot(data_dt, dropUnusedLevels = TRUE)
data_encoded_df <- as.data.frame(data_encoded)
# Create a list to hold mapping for each categorical variable
mapping_list <- lapply(cols_to_encode, function(col) {
# Get the unique levels for the categorical variable
levels <- unique(data_dt[[col]])
# Ensure consistent column names across all data frames
mapping_df <- data.frame(
original_value = levels,
encoded_column = paste0(col, "_", as.character(levels))
)
return(mapping_df)
})
# Combine all the mappings into a single data frame
mapping_table <- do.call(rbind, mapping_list)
# Calculate median of EFC
median_efc <- median(as.numeric(as.character(data$EFC)), na.rm = TRUE)
# Convert non-numeric values to NA and then replace them with the median
data$EFC <- as.numeric(as.character(data$EFC))
data$EFC[is.na(data$EFC)] <- median_efc
# Finally, converting EFC to numeric
data_encoded_df$EFC <- as.numeric(data_encoded_df$EFC)
# Find the median of the EFC values excluding the non-numeric entries
good_numeric_efc <- as.numeric(data$EFC[grepl("^[0-9]+$", data$EFC)])
median_efc <- median(good_numeric_efc, na.rm = TRUE)
# Replace non-numeric values with NA (to be replaced with the median later)
data$EFC <- as.numeric(data$EFC)
data$EFC[!grepl("^[0-9]+$", data$EFC)] <- NA
# Replace NA values with the median
data$EFC[is.na(data$EFC)] <- median_efc
# Apply the same conversion to the encoded data frame
data_encoded_df$EFC <- as.numeric(data_encoded_df$EFC)
data_encoded_df$EFC[is.na(data_encoded_df$EFC)] <- median_efc
str(data_encoded_df)
# Standardize the data (giving it a mean of 0 and a standard deviation of 1) by applying scale to the encoded data
data_scaled <- scale(data_encoded_df)
# Perform PCA
pca_result <- prcomp(data_scaled, center = TRUE, scale. = TRUE)
# Examine the summary to determine the number of principal components
summary(pca_result)
plot(pca_result, type = "lines")
# PCA based dataset with the first five components
pca_data <- pca_result$x[, 1:5]
# Determine the number of clusters using the Elbow Method
fviz_nbclust(pca_data, kmeans, method = "wss") + geom_vline(xintercept = 4, linetype = 2)
# Perform K-means clustering
set.seed(123)
kmeans_result <- kmeans(pca_data, centers = 4)
# Add the cluster assignments to the PCA data
pca_data$cluster <- kmeans_result$cluster
# Visualize the clusters
fviz_cluster(kmeans_result, data = pca_data)
# Visualize the clusters with a scatter plot for the first two principal components
library(ggplot2)
ggplot(pca_data, aes(PC1, PC2, color = as.factor(cluster))) +
geom_point(alpha = 0.5) +
labs(color = 'Cluster') +
theme_minimal()
# Convert pca_data to a dataframe
pca_data <- as.data.frame(pca_data)
# Perform K-means clustering
set.seed(123)
kmeans_result <- kmeans(pca_data, centers = 4)
# Add the cluster assignments to the PCA data
pca_data$cluster <- kmeans_result$cluster
# Visualize the clusters with a scatter plot for the first two principal components
library(ggplot2)
ggplot(pca_data, aes(PC1, PC2, color = as.factor(cluster))) +
geom_point(alpha = 0.5) +
labs(color = 'Cluster') +
theme_minimal()
names(pca_data)
# Convert pca_data to a dataframe
pca_data <- as.data.frame(pca_result$x[, 1:5])
# Properly name the columns to reflect that they are principal components
colnames(pca_data) <- c("PC1", "PC2", "PC3", "PC4", "PC5")
# Perform K-means clustering
set.seed(123)
kmeans_result <- kmeans(pca_data, centers = 4)
# Add the cluster assignments to the PCA data
pca_data$cluster <- kmeans_result$cluster
# Visualize the clusters with a scatter plot for the first two principal components
library(ggplot2)
ggplot(pca_data, aes(PC1, PC2, color = as.factor(cluster))) +
geom_point(alpha = 0.5) +
labs(color = 'Cluster') +
theme_minimal()
# Visualize clustering in 3D using the first three principal components
library(rgl)
install.packages("rgl")
# Convert pca_data to a dataframe
pca_data <- as.data.frame(pca_result$x[, 1:5])
# Properly name the columns to reflect that they are principal components
colnames(pca_data) <- c("PC1", "PC2", "PC3", "PC4", "PC5")
# Perform K-means clustering
set.seed(123)
kmeans_result <- kmeans(pca_data, centers = 4)
# Add the cluster assignments to the PCA data
pca_data$cluster <- kmeans_result$cluster
# Visualize the clusters with a scatter plot for the first two principal components
library(ggplot2)
ggplot(pca_data, aes(PC1, PC2, color = as.factor(cluster))) +
geom_point(alpha = 0.5) +
labs(color = 'Cluster') +
theme_minimal()
# Visualize clustering in 3D using the first three principal components
library(rgl)
plot3d(pca_data$PC1, pca_data$PC2, pca_data$PC3, col = kmeans_result$cluster)
# Add cluster assignments to the original data
data$cluster <- kmeans_result$cluster
# Decoding the one-hot encoded variables
# For each cluster, find the mode (most frequent value) for each categorical variable
decoded_clusters <- lapply(1:max(data$cluster), function(cluster_number) {
cluster_data <- data[data$cluster == cluster_number, ]
sapply(cols_to_encode, function(col) {
original_values <- mapping_table[mapping_table$encoded_column %in% names(cluster_data), "original_value"]
Mode(original_values)
})
})
# Define the Mode function
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Add cluster assignments to the original data
data$cluster <- kmeans_result$cluster
# Decoding the one-hot encoded variables
# For each cluster, find the mode (most frequent value) for each categorical variable
decoded_clusters <- lapply(1:max(data$cluster), function(cluster_number) {
cluster_data <- data[data$cluster == cluster_number, ]
sapply(cols_to_encode, function(col) {
original_values <- mapping_table[mapping_table$encoded_column %in% names(cluster_data), "original_value"]
Mode(original_values)
})
})
# Convert the list to a dataframe for easier viewing
decoded_cluster_modes <- do.call(rbind, decoded_clusters)
colnames(decoded_cluster_modes) <- cols_to_encode
# `decoded_cluster_modes` will give the most frequent original values of the categorical variables for each cluster
print(decoded_cluster_modes)
# Ensure the mapping table is correct and available
print(head(mapping_table))
# Define the Mode function
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Add cluster assignments to the original data
data$cluster <- kmeans_result$cluster
# Decoding the one-hot encoded variables
decoded_clusters <- lapply(1:max(data$cluster), function(cluster_number) {
cluster_data <- data[data$cluster == cluster_number, ]
sapply(cols_to_encode, function(col) {
# Filter original values that are present in the cluster data
original_values <- cluster_data[col]
# Return the mode of the original values
Mode(original_values)
})
})
# Convert the list to a dataframe for easier viewing
decoded_cluster_modes <- do.call(rbind, decoded_clusters)
# Assign column names to match the original categorical variables
colnames(decoded_cluster_modes) <- cols_to_encode
# `decoded_cluster_modes` will give the most frequent original values of the categorical variables for each cluster
print(decoded_cluster_modes)
# Define the Mode function
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Add cluster assignments to the original data
data$cluster <- kmeans_result$cluster
# Decoding the one-hot encoded variables
decoded_clusters <- lapply(1:max(data$cluster), function(cluster_number) {
cluster_data <- data[data$cluster == cluster_number, ]
sapply(cols_to_encode, function(col) {
# Filter original values that are present in the cluster data
# original_values <- cluster_data[col]
# Return the mode of the original values
Mode(original_values)
})
})
# Define the Mode function
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Add cluster assignments to the original data
data$cluster <- kmeans_result$cluster
# Decoding the one-hot encoded variables
decoded_clusters <- lapply(1:max(data$cluster), function(cluster_number) {
cluster_data <- data[data$cluster == cluster_number, ]
sapply(cols_to_encode, function(col) {
# Filter original values that are present in the cluster data
# original_values <- cluster_data[col]
# Return the mode of the original values
Mode(cluster_data[[col]])
})
})
# Convert the list to a dataframe for easier viewing
decoded_cluster_modes <- do.call(rbind, decoded_clusters)
# Assign column names to match the original categorical variables
colnames(decoded_cluster_modes) <- cols_to_encode
# `decoded_cluster_modes` will give the most frequent original values of the categorical variables for each cluster
print(decoded_cluster_modes)
